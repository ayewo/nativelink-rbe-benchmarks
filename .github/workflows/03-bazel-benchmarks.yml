name: Performance Benchmarks

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '30 23 * * *'  # Trigger daily at 23:30 UTC
  workflow_dispatch:
  
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  # --- Benchmark configuration for the target repo ---
  BENCHMARK_PROJECT_REPO_URL: "https://github.com/llvm/llvm-project.git"
  BENCHMARK_PROJECT_REPO: "llvm/llvm-project"
  BENCHMARK_PROJECT_VERSION: "llvmorg-20.1.7" # commit 6146a88f60492b520a36f8f8f3231e15f3cc6082
  BENCHMARK_PROJECT_DIR: "target-repo"  

  # --- Bazel configuration ---
  BAZEL_VERSION: "8.2.1"
  BAZEL_REMOTE_JOBS: 200

jobs:
  benchmarks:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: Clone and checkout this repo
        uses: >- # v4.2.2
          actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Clone and checkout target repo
        uses: >- # v4.2.2
          actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          repository: ${{ env.BENCHMARK_PROJECT_REPO }}
          path: ${{ env.BENCHMARK_PROJECT_DIR }}
          # ref: ${{ env.BENCHMARK_PROJECT_VERSION }}

      - name: Save commit metadata from the target repo as environment variables
        run: |
          cd ${{ env.BENCHMARK_PROJECT_DIR }}
          COMMIT_HASH=$(git rev-parse HEAD)
          echo "Checked out commit $COMMIT_HASH from ${{ env.BENCHMARK_PROJECT_REPO_URL }}"
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
          { echo 'COMMIT_MESSAGE<<EOF'; git log -1 --pretty=%B; echo EOF; } >> "$GITHUB_ENV" 
          
      - name: Check if this commit in the target repo has been benchmarked before
        id: check_commit
        run: |
          # Check if CSV file exists (try both possible names)
          CSV_FILE=""
          if [ -f "remote-caching.csv" ]; then
            CSV_FILE="remote-caching.csv"
          elif [ -f "remote-execution.csv" ]; then
            CSV_FILE="remote-execution.csv"
          else
            echo "Error: Neither remote-caching.csv nor remote-execution.csv found"
            exit 1
          fi
          
          echo "Found CSV file: $CSV_FILE"
          
          # Get the last row's commitHash (skip header, get last line, extract 3rd field)
          LAST_COMMIT_HASH=$(tail -n +2 "$CSV_FILE" | tail -n 1 | cut -d',' -f3)
          
          echo "Target repo commit hash from last run: $LAST_COMMIT_HASH"
          echo "Target repo commit hash from current run: $COMMIT_HASH"
          
          # Compare commit hashes
          if [ "$COMMIT_HASH" = "$LAST_COMMIT_HASH" ]; then
            echo "Commit hashes match - ending job as there are no new commits in the target repo"
            echo "skip_next=true" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Commit hashes differ - continue job run building the target repo"
            echo "skip_next=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Setup Bazel
        uses: >- # v0.8.5
          bazel-contrib/setup-bazel@e403ad507104847c3539436f64a9e9eecc73eeec
        with:
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}
          repository-cache: true
          bazelisk-version: 1.x

      - name: Install target repo build dependencies, hyperfine & jq
        run: |
          sudo apt-get update
          sudo apt-get install -y \
              hyperfine jq asciidoc asciidoctor source-highlight graphviz \
              gcc uuid-dev libncurses-dev flex clang bison openjdk-17-jdk parallel wget libedit-dev \
              cmake python3 python3-pip zlib1g-dev make ninja-build \
              build-essential git ca-certificates curl libzstd-dev pkg-config \
              lsb-release gnupg software-properties-common \
              libxml2-dev libffi-dev libssl-dev python3-setuptools libtool autoconf zip unzip
          
      - name: Update filesystem permissions
        run: |
          sudo chown -R $USER:$USER $GITHUB_WORKSPACE
          chmod -R 755 $GITHUB_WORKSPACE

      - name: Add Nativelink config to the target repo's .bazelrc
        working-directory: ${{ env.BENCHMARK_PROJECT_DIR }}
        run: |
          cat > utils/bazel/user.bazelrc << 'EOF'
          # debugging config
          build -s
          build --verbose_failures

          # external/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp:4416:18: error: use of undeclared identifier 'MAX_CLANG_ABI_COMPAT_VERSION'
          build --copt=-DMAX_CLANG_ABI_COMPAT_VERSION=18        

          # NativeLink config
          build --remote_header=${{ vars.NATIVELINK_HEADER_PROJECT_NAME }}
          build --remote_cache=${{ vars.NATIVELINK_URL_REMOTE_CACHE }}
          build --remote_header=${{ secrets.NATIVELINK_HEADER_API_KEY }}
          build --bes_header=${{ secrets.NATIVELINK_HEADER_API_KEY }}         
          build --bes_backend=${{ vars.NATIVELINK_URL_BES_BACKEND }}
          build --bes_results_url=${{ vars.NATIVELINK_URL_BES_RESULTS }}
          build --remote_download_minimal
          build --remote_timeout=600
          build --jobs=200
          build:remote_execution --remote_executor=${{ vars.NATIVELINK_URL_REMOTE_EXECUTOR }}
          build:remote_execution --remote_default_exec_properties=${{ vars.NATIVELINK_HEADER_REMOTE_EXECUTOR }}
          
          EOF

      # --- Scenario 01: Build target repo with Remote Cache Only ---
      - name: Target repo build using Bazel Remote Caching - run
        working-directory: ${{ env.BENCHMARK_PROJECT_DIR }}/utils/bazel
        run: |
          bazel clean --expunge
          bazel build --build_event_json_file=$GITHUB_WORKSPACE/01-bep-remote-cache.json \
            --build_event_binary_file=$GITHUB_WORKSPACE/01-bep-remote-cache.bin \
            --config=generic_clang @llvm-project//llvm:llvm

      - name: Target repo build using Bazel Remote Caching - write to CSV
        run: |
          python csv.writer.py $GITHUB_WORKSPACE/01-bep-remote-cache.json \
          remote-caching.csv ${{ env.COMMIT_HASH }} ${{ toJSON(env.COMMIT_MESSAGE) }}

      # --- Scenario 02: Build with Remote Caching & Execution ---
      - name: Target repo build using Bazel Remote Execution - run
        working-directory: ${{ env.BENCHMARK_PROJECT_DIR }}/utils/bazel
        run: |
          bazel clean --expunge
          bazel build --build_event_json_file=$GITHUB_WORKSPACE/02-bep-remote-cache-and-execution.json \
            --build_event_binary_file=$GITHUB_WORKSPACE/02-bep-remote-cache-and-execution.bin \
            --config=generic_clang --config=remote_execution @llvm-project//llvm:llvm
      - name: Target repo build using Bazel Remote Execution - write to CSV
        run: |
          python csv.writer.py $GITHUB_WORKSPACE/02-bep-remote-cache-and-execution.json \
          remote-execution.csv ${{ env.COMMIT_HASH }} ${{ toJSON(env.COMMIT_MESSAGE) }}

      - name: Add updated CSVs of the run results to git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add remote-caching.csv remote-execution.csv
          git commit -m "Update benchmark results of the target-repo
          
          Commit: ${{ env.BENCHMARK_PROJECT_REPO }}@${{ env.COMMIT_HASH }}"
          git push origin main

      - name: Check if BEP JSON files from the Bazel build exist
        id: check-bep
        if: always()
        run: |
          files=()
          for file in 01-bep-remote-cache.json 01-bep-remote-cache.bin 02-bep-remote-cache-and-execution.json 02-bep-remote-cache-and-execution.bin; do
            if [ -f "$file" ]; then
              files+=("$file")
            fi
          done
          if [ ${#files[@]} -eq 0 ]; then
            echo "No BEP JSON files found. Skipping upload."
            echo "found=false" >> $GITHUB_OUTPUT
          else
            printf "%s\n" "${files[@]}"
            echo "found=true" >> $GITHUB_OUTPUT
          fi

      - name: Upload Bazel BEP JSON output as build artifacts
        uses: >- # v4.6.2
          actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        if: always() && steps.check-bep.outputs.found == 'true'
        with:
          name: build_event_output
          path: |
            01-bep-remote-cache.json
            01-bep-remote-cache.bin
            02-bep-remote-cache-and-execution.json
            02-bep-remote-cache-and-execution.bin
          retention-days: 30
